setter	 
		데이터를 저장하기 위한것. 이게 선행되어야 한다 그래야 lord에 setter를 하고 		print에서 getter가 가능
getter	 
		저장된 데이터를 읽는것 


이거 해석해보기:
	ScoreDto sdto;
	List<ScoreDto> list= new ArrayList();
	public void makeScore() {
		for (int i = 0; i < 10; i++) {
			sdto= new ScoreDto();
			sdto.setStName("%03d");---이거 이름 바꾸는 것도 format으로 하는데 어떻게 하는지 확인
			sdto.setScKor((int)(Math.random()*50)+51);
			sdto.setScEng((int)(Math.random()*50)+51);
			sdto.setScMath((int)(Math.random()*50)+51);
			list.add(sdto);
		}

		배열은 새로 선언하면 기존의 배열은 사라지고 새로 만들어진다

interface

		interface에서 만들어진 메서드는 그걸을 implement하는 클래스에게 interface에서 사용한 메서드를
		무조건 같게 사용해야하는 강제성을 가진다. 


.split

		// 문자열변수(문자열데이터).split("구분자")
		// 문자열 변수에 저장된 문자열을 "구분자" 로 구분하여
		//	문자열 배열로 생성해주는 method
		String[] student= StdData.STUDENT[0].split(",");
	

		java 프로젝트 16  impl 패키지 StudentServiceimplV1 클래스 다시


확장된for

		for(type a:score){		
		}
		- 어떤 타입을 가지는 a를 socre만큼 반복한다.
		이때 a에 socre가 가진 객체를 사용 가능

substring ( x , y )
			x~y까지 글자수를 출력한다

trim()
		문자형변수 뒤에 붙는 명령어로 빈칸을 없애준다
		ex) "   13531" - 라는 글자를 Integer.value로 숫자로 바꿀때 빈칸이 있어 변경이 안된다 그러니
		Integer.value.trim(); 이렇게 뒤에 붙여준다


%s(문자), %d(정수),  %f(실수)
		"%03d"  는 3칸을 만들고 d를 오른쪽부터 정렬한다
		"%-03d"	는 3칸을 만들고 d를 왼쪽부터 정렬한다.


try catch문 
			코드가 중단되는 것을 막기 위해 try문이 실행이 안된다면 catch문이 실행되게 한다.
			catch문은 그에 대한 경고 문장과 rey

Scanner		사용법: scan.nextline();- 문자열에 사용, 어떤 값을 입력하게 한다.
				 , scan.hasnext()- 거짓이 될때까지, 	while문의 조건에 쓴다. 

			Scanner scan = new Scanner(); 이렇게 scan객체를 생성하고 
			저장하고 싶은 값에 저장하면 된다.
			예를 들면 Dto를 선언 하고 stDto= scan.nextline(); 이렇게 한다던지

List<>
			 1.add(z), add(x,y) x번째에 y를 넣는다(리스트는 0부터 시작)
			 2. get
			 3. size
			 contains("142") 이 메서드는 리스트 안에 해당 항목있는지는 판별해 그 결과를 boolean으로 저장-true, false
			 4. remove() 삭제

			 ****	만약 list를 출력하고 싶다면
			 확장 for를 사용해라 ****

			 contain
			 System.out.println(pitches.contains("142")); 리스트 안에 142가 들어 있다면 true 아니면 falce로 판별한다


inputstream 

outputstream
				주기억장치에 데이터가 들어오는 경우 inputsream
				주기억장치로부터 데이터가 나가는 경우 outputstream이라고 한다

				출력할 데이터는 열고 닫는 곳을 조심해야 한다.


				try {----- 여는 곳
			os = new FileOutputStream(Config.STUDENT_FILE);
			out = new PrintWriter(os);

			for (StudentDto dto : stdList) {
				out.printf("%s\t", dto.stNum); 
				out.printf("%s\t", dto.stName);
				out.printf("%s\t", dto.stDept);
				out.printf("%d\n", dto.stGrade);-- 담을 데이터
			}
			out.close();
			os.close(); -----닫는곳

			os= new FileOutputStream(담을 데이터);
			를 통해 try문을 열고
			데이터를 담고  out.close로 닫는다
			이떄 os도 닫는데 에러 뜨면 add catch to surrounding try를 누르면 캐치문 하나가 더 입력된다.


객체형변환
			((매서드가 들어있는 클래스 이름) 메인에서 생성한 클래스 객체 이름).클래스의 매서드();



날짜 입력코드
			Date date = new Date(System.currentTimeMillis()); // 시간 값을 데이터한테 보내서 시간 객체를 만듬
			SimpleDateFormat todayFormat = new SimpleDateFormat("YYYY-MM-dd");
			String todayString = todayFormat.format(date);

			Date클래스와 SimpleDateFormat클래스 사용후
			String 클래스로 문자열 하나 만들고 SimpleDateFormat클래스의 변수명.format(Date클래스의 변수명)을 적어줌
			즉 String str= todayFormat.format(date); 가 


.contains()		
			 contains() 함수는 대상 문자열에 특정 문자열이 포함되어 있는지 확인하는 함수이다. - 대/소문자를 구분한다.



isEmpty

			isEmpty() 메소드는 문자열이 빈 값이면 true, 비어있지 않으면 false를 리턴하는 메소드입니다


			5.16
			코드 실행 순서 - scan.nextline 전에 안내하는 말을 넣어야 하는데 뒤에 넣음


전역변수		
			한 클래스 안에서 설정한 변수
			예를 들어 private int num 같은거 
			이 변수는 한 클래스 내에서는 메인과 메서드안에서는 따로 설정할 필요 없이
			얼마든지 같이 사용 가능



패키지 이름은 언제나 3단계. com. 이름. 프로젝트 이름		